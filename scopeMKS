const scope = {
    excerciseS() {
      var city = 'Denver'

      function changeCity() {
        if (city === 'Denver') {
          city = 'Cincinnati'
          // Log: 'A' city)
        }

        function newCity(city) {
          if (city === 'Cincinnati') {
            city = 'Vail'
          }
          // Log: 'B' city
        }
        newCity(city)
      }
      // Log: 'C' city
      changeCity()
      // Log: 'D' city
      
      const result = [
        { 'C': 'Denver' },
        { 'A': 'Cincinnati' },
        { 'D': 'Vail' },
        { 'B': 'Cincinnati' }
      ]
      return result;
      
      // Annotation:
      // Write your annotation her as a comment
    },
    excerciseT() {
      var petName1 = 'Flash'
      var petName2 = 'Benji'

      function play() {
        if (petName1 === 'Flash') {
          petName2 = 'Diamond';
          petName1 = 'Baxster';
          // Log: 'A' petName2
        }

        function rest(petName1) {
          petName1 = 'Black Diamond'
          // Log: 'B' petName1
          if (petName1 === 'Black Diamond') {
            petName2 = 'Lady';
          }
        }
        rest(petName1)
        // Log: 'D' petName2
      }
      // Log: 'E', petName2
      play()
      // Log: 'F', petName1
      
      const result = [  
        { 'E': 'Benji' },
        { 'A': 'Diamond' },
        { 'B': 'Black Diamond' },
        { 'C': 'Mason' },
        { 'D': 'Lady' },
        { 'F': 'Baxster'}
      ]
      return result;
      
      // Annotation:
      // Write your annotation her as a comment
    },
    excerciseU() {
      let bool = true;
      let number = 80

      function makeIt() {
        let bool = false;
        if (number === 80 && bool !== true) {
          number -= 20
          const bool = true
          // 'Log A', bool
        }
        // 'Log B', bool
        function breakIt(number) {
          bool = true
          if (number !== 80) {
            number += 40
            // 'Log C', numbers
          }
          // 'Log D', bool
        }
        breakIt(number);
        number += 30
      }
      makeIt()
      // 'Log E',number
      
      const result = [
        { 'A': 60 },
        { 'B': false },
        { 'C': 100 },
        { 'D': true },
        { 'E': 90 }
      ]
      return result;
    }  
      // Annotation:
      // Write your annotation her as a comment 
  };
    module.exports = scope;
    
    
    const chai = require("chai");
const expect = chai.expect;
const scope = require("../scope/i");

chai.use(function(e, t) {
  e.Assertion.addMethod("withMessage", function(e) {
    t.flag(this, "message", e)
  })
})

describe("SCOPE", () => {
  it("exerciseS", () => {
    const e = JSON.stringify(scope.exerciseS()) == JSON.stringify([{
      C: "Denver"
    }, {
      A: "Cincinnati"
    }, {
      D: "Vail"
    }, {
      B: "Cincinnati"
    }]);
    expect(e).withMessage("Your order of execution and/or values for variables in your result object are incorrect").to.be.true
  }), it("exerciseT", () => {
    const e = JSON.stringify(scope.exerciseT()) == JSON.stringify([{
      E: "Benji"
    }, {
      A: "Diamond"
    }, {
      B: "Black Diamond"
    }, {
      C: "Mason"
    }, { 
      D: "Lady"
    }, {
      F: "Baxster"
    }]);
    expect(e).withMessage("Your order of execution and/or values for variables in your result object are incorrect").to.be.true
  }), it("exerciseU", () => {
    const e = JSON.stringify(scope.exerciseU()) == JSON.stringify([{
      A: 60
    }, {
      B: false
    }, {
      C: 100
    }, {
      D: true
    }, {
      E: 90
    }]);
    expect(e).withMessage("Your order of execution and/or values for variables in your result object are incorrect").to.be.true
  },
    module.exports = {scope}
